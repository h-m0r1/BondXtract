#!/usr/bin/env python3
"""
Generate symmetry operations for space group numbers 1-230 using pymatgen.
Outputs each space group as a separate JSON file in a subdirectory, plus an index and loader script.
"""

import json
import os
from pymatgen.symmetry.groups import SpaceGroup

def generate_symmetry_operations():
    """Generate symmetry operations for space group numbers 1-230."""
    symmetry_data = {}
    print("Generating symmetry operations for space group numbers 1-230...")
    for space_group_number in range(1, 231):
        try:
            sg = SpaceGroup.from_int_number(space_group_number)
            operations = [op.as_xyz_str() for op in sg.symmetry_ops]
            sg_data = {
                "space_group_number": space_group_number,
                "space_group_symbol": sg.symbol,
                "space_group_name": sg.full_symbol,
                "symmetry_operations": operations,
                "operation_count": len(operations)
            }
            symmetry_data[space_group_number] = sg_data
            print(f"Space group {space_group_number} ({sg.symbol}): {len(operations)} operations")
        except Exception as e:
            print(f"Error processing space group {space_group_number}: {e}")
            sg_data = {
                "space_group_number": space_group_number,
                "space_group_symbol": "ERROR",
                "space_group_name": "ERROR",
                "symmetry_operations": [],
                "operation_count": 0,
                "error": str(e)
            }
            symmetry_data[space_group_number] = sg_data
    return symmetry_data

def save_individual_files(data, output_dir="symmetry_operations"):
    """Save each space group as a separate JSON file in a subdirectory."""
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        print(f"Created directory: {output_dir}")
    json_dir = os.path.join(output_dir, "json")
    if not os.path.exists(json_dir):
        os.makedirs(json_dir)
        print(f"Created JSON directory: {json_dir}")
    for sg_number, sg_data in data.items():
        filename = f"sg_{sg_number:03d}.json"
        filepath = os.path.join(json_dir, filename)
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(sg_data, f, indent=2, ensure_ascii=False)
        print(f"Saved: json/{filename}")
    print(f"All individual files saved in {json_dir}")

def save_index_file(data, output_dir="symmetry_operations"):
    """Create an index file for all space groups."""
    json_dir = os.path.join(output_dir, "json")
    if not os.path.exists(json_dir):
        os.makedirs(json_dir)
    index_data = {}
    for sg_number, sg_data in data.items():
        index_data[sg_number] = {
            "space_group_number": sg_data["space_group_number"],
            "space_group_symbol": sg_data["space_group_symbol"],
            "space_group_name": sg_data["space_group_name"],
            "operation_count": sg_data["operation_count"],
            "filename": f"sg_{sg_number:03d}.json"
        }
    index_filepath = os.path.join(json_dir, "index.json")
    with open(index_filepath, 'w', encoding='utf-8') as f:
        json.dump(index_data, f, indent=2, ensure_ascii=False)
    print(f"Index file saved: {index_filepath}")

def save_loader_script(output_dir="symmetry_operations"):
    """Create a JavaScript loader script for the symmetry operations."""
    loader_content = '''// Space group symmetry operation loader
// This file is auto-generated by generate_symmetry_operations.py

const spaceGroupCache = {};

async function getSymmetryOperationsBySpaceGroupNumber(spaceGroupNumber) {
    if (spaceGroupCache[spaceGroupNumber]) {
        return spaceGroupCache[spaceGroupNumber].symmetry_operations;
    }
    try {
        const filename = `sg_${String(spaceGroupNumber).padStart(3, '0')}.json`;
        const response = await fetch(`symmetry_operations/json/${filename}`);
        if (!response.ok) {
            throw new Error(`Space group ${spaceGroupNumber} data file not found`);
        }
        const sgData = await response.json();
        if (sgData.error) {
            throw new Error(`Space group ${spaceGroupNumber} data error: ${sgData.error}`);
        }
        spaceGroupCache[spaceGroupNumber] = sgData;
        return sgData.symmetry_operations;
    } catch (error) {
        console.error(`Error loading space group ${spaceGroupNumber}:`, error);
        throw error;
    }
}

async function getSpaceGroupInfo(spaceGroupNumber) {
    if (spaceGroupCache[spaceGroupNumber]) {
        const data = spaceGroupCache[spaceGroupNumber];
        return {
            number: data.space_group_number,
            symbol: data.space_group_symbol,
            name: data.space_group_name,
            operationCount: data.operation_count
        };
    }
    try {
        const filename = `sg_${String(spaceGroupNumber).padStart(3, '0')}.json`;
        const response = await fetch(`symmetry_operations/json/${filename}`);
        if (!response.ok) {
            throw new Error(`Space group ${spaceGroupNumber} data file not found`);
        }
        const sgData = await response.json();
        if (sgData.error) {
            throw new Error(`Space group ${spaceGroupNumber} data error: ${sgData.error}`);
        }
        spaceGroupCache[spaceGroupNumber] = sgData;
        return {
            number: sgData.space_group_number,
            symbol: sgData.space_group_symbol,
            name: sgData.space_group_name,
            operationCount: sgData.operation_count
        };
    } catch (error) {
        console.error(`Error loading space group info ${spaceGroupNumber}:`, error);
        throw error;
    }
}

async function getAvailableSpaceGroupNumbers() {
    try {
        const response = await fetch('symmetry_operations/json/index.json');
        if (!response.ok) {
            throw new Error('Index file not found');
        }
        const indexData = await response.json();
        return Object.keys(indexData).map(Number).sort((a, b) => a - b);
    } catch (error) {
        console.error('Error loading available space group numbers:', error);
        throw error;
    }
}

async function preloadSpaceGroupData(spaceGroupNumbers) {
    const promises = spaceGroupNumbers.map(async (number) => {
        try {
            await getSymmetryOperationsBySpaceGroupNumber(number);
            console.log(`Preloaded space group ${number}`);
        } catch (error) {
            console.warn(`Failed to preload space group ${number}:`, error);
        }
    });
    await Promise.all(promises);
    console.log('Preload complete');
}

function clearSpaceGroupCache() {
    Object.keys(spaceGroupCache).forEach(key => {
        delete spaceGroupCache[key];
    });
    console.log('Cleared space group cache');
}
'''
    loader_filepath = os.path.join(output_dir, "space_group_loader.js")
    with open(loader_filepath, 'w', encoding='utf-8') as f:
        f.write(loader_content)
    print(f"Loader script saved: {loader_filepath}")

def save_combined_file(data, output_dir="symmetry_operations"):
    """Save all symmetry operations in a single file (optional)."""
    json_dir = os.path.join(output_dir, "json")
    if not os.path.exists(json_dir):
        os.makedirs(json_dir)
    combined_filepath = os.path.join(json_dir, "all_symmetry_operations.json")
    with open(combined_filepath, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    print(f"All data saved: {combined_filepath}")

def create_readme_file(output_dir="symmetry_operations"):
    """Create a README file describing the data structure and usage."""
    readme_content = """# Space Group Symmetry Operation Data

This directory contains symmetry operation data for space group numbers 1-230.

## File Structure

```
symmetry_operations/
├── space_group_loader.js         # JavaScript loader script
├── README.md                     # This file
└── json/                         # JSON data files
    ├── index.json                # Index of all space groups
    ├── all_symmetry_operations.json  # All data in one file
    ├── sg_001.json               # Space group 1
    ├── sg_002.json               # Space group 2
    ├── ...
    ├── sg_229.json               # Space group 229
    └── sg_230.json               # Space group 230
```

## Usage Example

```html
<script src="symmetry_operations/space_group_loader.js"></script>
<script>
async function loadSymOps(sgNumber) {
    const ops = await getSymmetryOperationsBySpaceGroupNumber(sgNumber);
    console.log(ops);
}
</script>
```

## Data Format

Each JSON file contains:

```
{
  "space_group_number": 1,
  "space_group_symbol": "P1",
  "space_group_name": "P 1",
  "symmetry_operations": ["x, y, z"],
  "operation_count": 1
}
```

## Generation

This data was generated by `generate_symmetry_operations.py` using pymatgen.
"""
    readme_filepath = os.path.join(output_dir, "README.md")
    with open(readme_filepath, 'w', encoding='utf-8') as f:
        f.write(readme_content)
    print(f"README saved: {readme_filepath}")

def main():
    print("=== Space Group Symmetry Operation Data Generator ===")
    print("Generating symmetry operations for space group numbers 1-230 using pymatgen.")
    data = generate_symmetry_operations()
    save_individual_files(data)
    save_index_file(data)
    save_loader_script()
    save_combined_file(data)
    create_readme_file()
    total_ops = sum(len(d["symmetry_operations"]) for d in data.values())
    error_count = sum(1 for d in data.values() if "error" in d)
    print(f"\n=== Generation Complete ===")
    print(f"Space groups processed: {len(data)}")
    print(f"Total symmetry operations: {total_ops}")
    print(f"Errors: {error_count}")
    print(f"Files generated: {len(data) + 5}")

if __name__ == "__main__":
    main() 